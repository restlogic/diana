# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FlavorcreatepostreqFlavor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'ram': 'int',
        'vcpus': 'int',
        'disk': 'int',
        'id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'ram': 'ram',
        'vcpus': 'vcpus',
        'disk': 'disk',
        'id': 'id',
        'description': 'description'
    }

    def __init__(self, name=None, ram=None, vcpus=None, disk=None, id=None, description=None, _configuration=None):  # noqa: E501
        """FlavorcreatepostreqFlavor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._ram = None
        self._vcpus = None
        self._disk = None
        self._id = None
        self._description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if ram is not None:
            self.ram = ram
        if vcpus is not None:
            self.vcpus = vcpus
        if disk is not None:
            self.disk = disk
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this FlavorcreatepostreqFlavor.  # noqa: E501


        :return: The name of this FlavorcreatepostreqFlavor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FlavorcreatepostreqFlavor.


        :param name: The name of this FlavorcreatepostreqFlavor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ram(self):
        """Gets the ram of this FlavorcreatepostreqFlavor.  # noqa: E501


        :return: The ram of this FlavorcreatepostreqFlavor.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this FlavorcreatepostreqFlavor.


        :param ram: The ram of this FlavorcreatepostreqFlavor.  # noqa: E501
        :type: int
        """

        self._ram = ram

    @property
    def vcpus(self):
        """Gets the vcpus of this FlavorcreatepostreqFlavor.  # noqa: E501


        :return: The vcpus of this FlavorcreatepostreqFlavor.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this FlavorcreatepostreqFlavor.


        :param vcpus: The vcpus of this FlavorcreatepostreqFlavor.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def disk(self):
        """Gets the disk of this FlavorcreatepostreqFlavor.  # noqa: E501


        :return: The disk of this FlavorcreatepostreqFlavor.  # noqa: E501
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this FlavorcreatepostreqFlavor.


        :param disk: The disk of this FlavorcreatepostreqFlavor.  # noqa: E501
        :type: int
        """

        self._disk = disk

    @property
    def id(self):
        """Gets the id of this FlavorcreatepostreqFlavor.  # noqa: E501


        :return: The id of this FlavorcreatepostreqFlavor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlavorcreatepostreqFlavor.


        :param id: The id of this FlavorcreatepostreqFlavor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this FlavorcreatepostreqFlavor.  # noqa: E501


        :return: The description of this FlavorcreatepostreqFlavor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FlavorcreatepostreqFlavor.


        :param description: The description of this FlavorcreatepostreqFlavor.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlavorcreatepostreqFlavor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlavorcreatepostreqFlavor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlavorcreatepostreqFlavor):
            return True

        return self.to_dict() != other.to_dict()
