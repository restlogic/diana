# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AgentpostreqAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hypervisor': 'str',
        'os': 'str',
        'architecture': 'str',
        'version': 'str',
        'md5hash': 'str',
        'url': 'str'
    }

    attribute_map = {
        'hypervisor': 'hypervisor',
        'os': 'os',
        'architecture': 'architecture',
        'version': 'version',
        'md5hash': 'md5hash',
        'url': 'url'
    }

    def __init__(self, hypervisor=None, os=None, architecture=None, version=None, md5hash=None, url=None, _configuration=None):  # noqa: E501
        """AgentpostreqAgent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hypervisor = None
        self._os = None
        self._architecture = None
        self._version = None
        self._md5hash = None
        self._url = None
        self.discriminator = None

        if hypervisor is not None:
            self.hypervisor = hypervisor
        if os is not None:
            self.os = os
        if architecture is not None:
            self.architecture = architecture
        if version is not None:
            self.version = version
        if md5hash is not None:
            self.md5hash = md5hash
        if url is not None:
            self.url = url

    @property
    def hypervisor(self):
        """Gets the hypervisor of this AgentpostreqAgent.  # noqa: E501


        :return: The hypervisor of this AgentpostreqAgent.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor

    @hypervisor.setter
    def hypervisor(self, hypervisor):
        """Sets the hypervisor of this AgentpostreqAgent.


        :param hypervisor: The hypervisor of this AgentpostreqAgent.  # noqa: E501
        :type: str
        """

        self._hypervisor = hypervisor

    @property
    def os(self):
        """Gets the os of this AgentpostreqAgent.  # noqa: E501


        :return: The os of this AgentpostreqAgent.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this AgentpostreqAgent.


        :param os: The os of this AgentpostreqAgent.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def architecture(self):
        """Gets the architecture of this AgentpostreqAgent.  # noqa: E501


        :return: The architecture of this AgentpostreqAgent.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AgentpostreqAgent.


        :param architecture: The architecture of this AgentpostreqAgent.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def version(self):
        """Gets the version of this AgentpostreqAgent.  # noqa: E501


        :return: The version of this AgentpostreqAgent.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AgentpostreqAgent.


        :param version: The version of this AgentpostreqAgent.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def md5hash(self):
        """Gets the md5hash of this AgentpostreqAgent.  # noqa: E501


        :return: The md5hash of this AgentpostreqAgent.  # noqa: E501
        :rtype: str
        """
        return self._md5hash

    @md5hash.setter
    def md5hash(self, md5hash):
        """Sets the md5hash of this AgentpostreqAgent.


        :param md5hash: The md5hash of this AgentpostreqAgent.  # noqa: E501
        :type: str
        """

        self._md5hash = md5hash

    @property
    def url(self):
        """Gets the url of this AgentpostreqAgent.  # noqa: E501


        :return: The url of this AgentpostreqAgent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AgentpostreqAgent.


        :param url: The url of this AgentpostreqAgent.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentpostreqAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentpostreqAgent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentpostreqAgent):
            return True

        return self.to_dict() != other.to_dict()
