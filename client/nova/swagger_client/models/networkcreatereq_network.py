# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NetworkcreatereqNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'cidr': 'str',
        'mtu': 'int',
        'dhcp_server': 'str',
        'enable_dhcp': 'bool',
        'share_address': 'bool',
        'allowed_start': 'str',
        'allowed_end': 'str'
    }

    attribute_map = {
        'label': 'label',
        'cidr': 'cidr',
        'mtu': 'mtu',
        'dhcp_server': 'dhcp_server',
        'enable_dhcp': 'enable_dhcp',
        'share_address': 'share_address',
        'allowed_start': 'allowed_start',
        'allowed_end': 'allowed_end'
    }

    def __init__(self, label=None, cidr=None, mtu=None, dhcp_server=None, enable_dhcp=None, share_address=None, allowed_start=None, allowed_end=None, _configuration=None):  # noqa: E501
        """NetworkcreatereqNetwork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._label = None
        self._cidr = None
        self._mtu = None
        self._dhcp_server = None
        self._enable_dhcp = None
        self._share_address = None
        self._allowed_start = None
        self._allowed_end = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if cidr is not None:
            self.cidr = cidr
        if mtu is not None:
            self.mtu = mtu
        if dhcp_server is not None:
            self.dhcp_server = dhcp_server
        if enable_dhcp is not None:
            self.enable_dhcp = enable_dhcp
        if share_address is not None:
            self.share_address = share_address
        if allowed_start is not None:
            self.allowed_start = allowed_start
        if allowed_end is not None:
            self.allowed_end = allowed_end

    @property
    def label(self):
        """Gets the label of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The label of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NetworkcreatereqNetwork.


        :param label: The label of this NetworkcreatereqNetwork.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def cidr(self):
        """Gets the cidr of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The cidr of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this NetworkcreatereqNetwork.


        :param cidr: The cidr of this NetworkcreatereqNetwork.  # noqa: E501
        :type: str
        """

        self._cidr = cidr

    @property
    def mtu(self):
        """Gets the mtu of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The mtu of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkcreatereqNetwork.


        :param mtu: The mtu of this NetworkcreatereqNetwork.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def dhcp_server(self):
        """Gets the dhcp_server of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The dhcp_server of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server

    @dhcp_server.setter
    def dhcp_server(self, dhcp_server):
        """Sets the dhcp_server of this NetworkcreatereqNetwork.


        :param dhcp_server: The dhcp_server of this NetworkcreatereqNetwork.  # noqa: E501
        :type: str
        """

        self._dhcp_server = dhcp_server

    @property
    def enable_dhcp(self):
        """Gets the enable_dhcp of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The enable_dhcp of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dhcp

    @enable_dhcp.setter
    def enable_dhcp(self, enable_dhcp):
        """Sets the enable_dhcp of this NetworkcreatereqNetwork.


        :param enable_dhcp: The enable_dhcp of this NetworkcreatereqNetwork.  # noqa: E501
        :type: bool
        """

        self._enable_dhcp = enable_dhcp

    @property
    def share_address(self):
        """Gets the share_address of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The share_address of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._share_address

    @share_address.setter
    def share_address(self, share_address):
        """Sets the share_address of this NetworkcreatereqNetwork.


        :param share_address: The share_address of this NetworkcreatereqNetwork.  # noqa: E501
        :type: bool
        """

        self._share_address = share_address

    @property
    def allowed_start(self):
        """Gets the allowed_start of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The allowed_start of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: str
        """
        return self._allowed_start

    @allowed_start.setter
    def allowed_start(self, allowed_start):
        """Sets the allowed_start of this NetworkcreatereqNetwork.


        :param allowed_start: The allowed_start of this NetworkcreatereqNetwork.  # noqa: E501
        :type: str
        """

        self._allowed_start = allowed_start

    @property
    def allowed_end(self):
        """Gets the allowed_end of this NetworkcreatereqNetwork.  # noqa: E501


        :return: The allowed_end of this NetworkcreatereqNetwork.  # noqa: E501
        :rtype: str
        """
        return self._allowed_end

    @allowed_end.setter
    def allowed_end(self, allowed_end):
        """Sets the allowed_end of this NetworkcreatereqNetwork.


        :param allowed_end: The allowed_end of this NetworkcreatereqNetwork.  # noqa: E501
        :type: str
        """

        self._allowed_end = allowed_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkcreatereqNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkcreatereqNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkcreatereqNetwork):
            return True

        return self.to_dict() != other.to_dict()
