# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuotaclassesupdatepostreqQuotaClassSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instances': 'int',
        'cores': 'int',
        'ram': 'int',
        'metadata_items': 'int',
        'injected_files': 'int',
        'injected_file_content_bytes': 'int',
        'injected_file_path_bytes': 'int',
        'key_pairs': 'int',
        'server_groups': 'int',
        'server_group_members': 'int'
    }

    attribute_map = {
        'instances': 'instances',
        'cores': 'cores',
        'ram': 'ram',
        'metadata_items': 'metadata_items',
        'injected_files': 'injected_files',
        'injected_file_content_bytes': 'injected_file_content_bytes',
        'injected_file_path_bytes': 'injected_file_path_bytes',
        'key_pairs': 'key_pairs',
        'server_groups': 'server_groups',
        'server_group_members': 'server_group_members'
    }

    def __init__(self, instances=None, cores=None, ram=None, metadata_items=None, injected_files=None, injected_file_content_bytes=None, injected_file_path_bytes=None, key_pairs=None, server_groups=None, server_group_members=None, _configuration=None):  # noqa: E501
        """QuotaclassesupdatepostreqQuotaClassSet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instances = None
        self._cores = None
        self._ram = None
        self._metadata_items = None
        self._injected_files = None
        self._injected_file_content_bytes = None
        self._injected_file_path_bytes = None
        self._key_pairs = None
        self._server_groups = None
        self._server_group_members = None
        self.discriminator = None

        if instances is not None:
            self.instances = instances
        if cores is not None:
            self.cores = cores
        if ram is not None:
            self.ram = ram
        if metadata_items is not None:
            self.metadata_items = metadata_items
        if injected_files is not None:
            self.injected_files = injected_files
        if injected_file_content_bytes is not None:
            self.injected_file_content_bytes = injected_file_content_bytes
        if injected_file_path_bytes is not None:
            self.injected_file_path_bytes = injected_file_path_bytes
        if key_pairs is not None:
            self.key_pairs = key_pairs
        if server_groups is not None:
            self.server_groups = server_groups
        if server_group_members is not None:
            self.server_group_members = server_group_members

    @property
    def instances(self):
        """Gets the instances of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The instances of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this QuotaclassesupdatepostreqQuotaClassSet.


        :param instances: The instances of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._instances = instances

    @property
    def cores(self):
        """Gets the cores of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The cores of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this QuotaclassesupdatepostreqQuotaClassSet.


        :param cores: The cores of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._cores = cores

    @property
    def ram(self):
        """Gets the ram of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The ram of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this QuotaclassesupdatepostreqQuotaClassSet.


        :param ram: The ram of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._ram = ram

    @property
    def metadata_items(self):
        """Gets the metadata_items of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The metadata_items of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._metadata_items

    @metadata_items.setter
    def metadata_items(self, metadata_items):
        """Sets the metadata_items of this QuotaclassesupdatepostreqQuotaClassSet.


        :param metadata_items: The metadata_items of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._metadata_items = metadata_items

    @property
    def injected_files(self):
        """Gets the injected_files of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The injected_files of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._injected_files

    @injected_files.setter
    def injected_files(self, injected_files):
        """Sets the injected_files of this QuotaclassesupdatepostreqQuotaClassSet.


        :param injected_files: The injected_files of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._injected_files = injected_files

    @property
    def injected_file_content_bytes(self):
        """Gets the injected_file_content_bytes of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The injected_file_content_bytes of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._injected_file_content_bytes

    @injected_file_content_bytes.setter
    def injected_file_content_bytes(self, injected_file_content_bytes):
        """Sets the injected_file_content_bytes of this QuotaclassesupdatepostreqQuotaClassSet.


        :param injected_file_content_bytes: The injected_file_content_bytes of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._injected_file_content_bytes = injected_file_content_bytes

    @property
    def injected_file_path_bytes(self):
        """Gets the injected_file_path_bytes of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The injected_file_path_bytes of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._injected_file_path_bytes

    @injected_file_path_bytes.setter
    def injected_file_path_bytes(self, injected_file_path_bytes):
        """Sets the injected_file_path_bytes of this QuotaclassesupdatepostreqQuotaClassSet.


        :param injected_file_path_bytes: The injected_file_path_bytes of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._injected_file_path_bytes = injected_file_path_bytes

    @property
    def key_pairs(self):
        """Gets the key_pairs of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The key_pairs of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._key_pairs

    @key_pairs.setter
    def key_pairs(self, key_pairs):
        """Sets the key_pairs of this QuotaclassesupdatepostreqQuotaClassSet.


        :param key_pairs: The key_pairs of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._key_pairs = key_pairs

    @property
    def server_groups(self):
        """Gets the server_groups of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The server_groups of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._server_groups

    @server_groups.setter
    def server_groups(self, server_groups):
        """Sets the server_groups of this QuotaclassesupdatepostreqQuotaClassSet.


        :param server_groups: The server_groups of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._server_groups = server_groups

    @property
    def server_group_members(self):
        """Gets the server_group_members of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501


        :return: The server_group_members of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :rtype: int
        """
        return self._server_group_members

    @server_group_members.setter
    def server_group_members(self, server_group_members):
        """Sets the server_group_members of this QuotaclassesupdatepostreqQuotaClassSet.


        :param server_group_members: The server_group_members of this QuotaclassesupdatepostreqQuotaClassSet.  # noqa: E501
        :type: int
        """

        self._server_group_members = server_group_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuotaclassesupdatepostreqQuotaClassSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuotaclassesupdatepostreqQuotaClassSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuotaclassesupdatepostreqQuotaClassSet):
            return True

        return self.to_dict() != other.to_dict()
