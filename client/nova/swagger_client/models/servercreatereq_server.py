# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ServercreatereqServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_i_pv4': 'str',
        'access_i_pv6': 'str',
        'name': 'str',
        'image_ref': 'str',
        'flavor_ref': 'str',
        'availability_zone': 'str',
        'os_dc_fdisk_config': 'str',
        'metadata': 'ServercreatereqServerMetadata',
        'personality': 'list[Personalit]',
        'security_groups': 'list[SecurityGroup]',
        'user_data': 'str'
    }

    attribute_map = {
        'access_i_pv4': 'accessIPv4',
        'access_i_pv6': 'accessIPv6',
        'name': 'name',
        'image_ref': 'imageRef',
        'flavor_ref': 'flavorRef',
        'availability_zone': 'availability_zone',
        'os_dc_fdisk_config': 'OS-DCF:diskConfig',
        'metadata': 'metadata',
        'personality': 'personality',
        'security_groups': 'security_groups',
        'user_data': 'user_data'
    }

    def __init__(self, access_i_pv4=None, access_i_pv6=None, name=None, image_ref=None, flavor_ref=None, availability_zone=None, os_dc_fdisk_config=None, metadata=None, personality=None, security_groups=None, user_data=None, _configuration=None):  # noqa: E501
        """ServercreatereqServer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_i_pv4 = None
        self._access_i_pv6 = None
        self._name = None
        self._image_ref = None
        self._flavor_ref = None
        self._availability_zone = None
        self._os_dc_fdisk_config = None
        self._metadata = None
        self._personality = None
        self._security_groups = None
        self._user_data = None
        self.discriminator = None

        if access_i_pv4 is not None:
            self.access_i_pv4 = access_i_pv4
        if access_i_pv6 is not None:
            self.access_i_pv6 = access_i_pv6
        if name is not None:
            self.name = name
        if image_ref is not None:
            self.image_ref = image_ref
        if flavor_ref is not None:
            self.flavor_ref = flavor_ref
        if availability_zone is not None:
            self.availability_zone = availability_zone
        if os_dc_fdisk_config is not None:
            self.os_dc_fdisk_config = os_dc_fdisk_config
        if metadata is not None:
            self.metadata = metadata
        if personality is not None:
            self.personality = personality
        if security_groups is not None:
            self.security_groups = security_groups
        if user_data is not None:
            self.user_data = user_data

    @property
    def access_i_pv4(self):
        """Gets the access_i_pv4 of this ServercreatereqServer.  # noqa: E501


        :return: The access_i_pv4 of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._access_i_pv4

    @access_i_pv4.setter
    def access_i_pv4(self, access_i_pv4):
        """Sets the access_i_pv4 of this ServercreatereqServer.


        :param access_i_pv4: The access_i_pv4 of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._access_i_pv4 = access_i_pv4

    @property
    def access_i_pv6(self):
        """Gets the access_i_pv6 of this ServercreatereqServer.  # noqa: E501


        :return: The access_i_pv6 of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._access_i_pv6

    @access_i_pv6.setter
    def access_i_pv6(self, access_i_pv6):
        """Sets the access_i_pv6 of this ServercreatereqServer.


        :param access_i_pv6: The access_i_pv6 of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._access_i_pv6 = access_i_pv6

    @property
    def name(self):
        """Gets the name of this ServercreatereqServer.  # noqa: E501


        :return: The name of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServercreatereqServer.


        :param name: The name of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def image_ref(self):
        """Gets the image_ref of this ServercreatereqServer.  # noqa: E501


        :return: The image_ref of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._image_ref

    @image_ref.setter
    def image_ref(self, image_ref):
        """Sets the image_ref of this ServercreatereqServer.


        :param image_ref: The image_ref of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._image_ref = image_ref

    @property
    def flavor_ref(self):
        """Gets the flavor_ref of this ServercreatereqServer.  # noqa: E501


        :return: The flavor_ref of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._flavor_ref

    @flavor_ref.setter
    def flavor_ref(self, flavor_ref):
        """Sets the flavor_ref of this ServercreatereqServer.


        :param flavor_ref: The flavor_ref of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._flavor_ref = flavor_ref

    @property
    def availability_zone(self):
        """Gets the availability_zone of this ServercreatereqServer.  # noqa: E501


        :return: The availability_zone of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this ServercreatereqServer.


        :param availability_zone: The availability_zone of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def os_dc_fdisk_config(self):
        """Gets the os_dc_fdisk_config of this ServercreatereqServer.  # noqa: E501


        :return: The os_dc_fdisk_config of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._os_dc_fdisk_config

    @os_dc_fdisk_config.setter
    def os_dc_fdisk_config(self, os_dc_fdisk_config):
        """Sets the os_dc_fdisk_config of this ServercreatereqServer.


        :param os_dc_fdisk_config: The os_dc_fdisk_config of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._os_dc_fdisk_config = os_dc_fdisk_config

    @property
    def metadata(self):
        """Gets the metadata of this ServercreatereqServer.  # noqa: E501


        :return: The metadata of this ServercreatereqServer.  # noqa: E501
        :rtype: ServercreatereqServerMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ServercreatereqServer.


        :param metadata: The metadata of this ServercreatereqServer.  # noqa: E501
        :type: ServercreatereqServerMetadata
        """

        self._metadata = metadata

    @property
    def personality(self):
        """Gets the personality of this ServercreatereqServer.  # noqa: E501


        :return: The personality of this ServercreatereqServer.  # noqa: E501
        :rtype: list[Personalit]
        """
        return self._personality

    @personality.setter
    def personality(self, personality):
        """Sets the personality of this ServercreatereqServer.


        :param personality: The personality of this ServercreatereqServer.  # noqa: E501
        :type: list[Personalit]
        """

        self._personality = personality

    @property
    def security_groups(self):
        """Gets the security_groups of this ServercreatereqServer.  # noqa: E501


        :return: The security_groups of this ServercreatereqServer.  # noqa: E501
        :rtype: list[SecurityGroup]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this ServercreatereqServer.


        :param security_groups: The security_groups of this ServercreatereqServer.  # noqa: E501
        :type: list[SecurityGroup]
        """

        self._security_groups = security_groups

    @property
    def user_data(self):
        """Gets the user_data of this ServercreatereqServer.  # noqa: E501


        :return: The user_data of this ServercreatereqServer.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this ServercreatereqServer.


        :param user_data: The user_data of this ServercreatereqServer.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServercreatereqServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServercreatereqServer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServercreatereqServer):
            return True

        return self.to_dict() != other.to_dict()
