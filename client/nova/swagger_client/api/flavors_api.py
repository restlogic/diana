# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FlavorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v21_flavors_detail_get(self, **kwargs):  # noqa: E501
        """v21_flavors_detail_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort_key: Sorts by a flavor attribute. Default attribute is ``flavorid``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. The sort keys are limited to:  - ``created_at`` - ``description`` - ``disabled`` - ``ephemeral_gb`` - ``flavorid`` - ``id`` - ``is_public`` - ``memory_mb`` - ``name`` - ``root_gb`` - ``rxtx_factor`` - ``swap`` - ``updated_at`` - ``vcpu_weight`` - ``vcpus`` 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``asc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str is_public: This parameter is only applicable to users with the administrative role. For all other non-admin users, the parameter is ignored and only public flavors will be returned. Filters the flavor list based on whether the flavor is public or private. If the value of this parameter is not specified, it is treated as ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False`` (they are case-insensitive). If the value is ``None`` (case-insensitive) both public and private flavors will be listed in a single request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_flavors_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_flavors_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_flavors_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_flavors_detail_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort_key: Sorts by a flavor attribute. Default attribute is ``flavorid``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. The sort keys are limited to:  - ``created_at`` - ``description`` - ``disabled`` - ``ephemeral_gb`` - ``flavorid`` - ``id`` - ``is_public`` - ``memory_mb`` - ``name`` - ``root_gb`` - ``rxtx_factor`` - ``swap`` - ``updated_at`` - ``vcpu_weight`` - ``vcpus`` 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``asc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str is_public: This parameter is only applicable to users with the administrative role. For all other non-admin users, the parameter is ignored and only public flavors will be returned. Filters the flavor list based on whether the flavor is public or private. If the value of this parameter is not specified, it is treated as ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False`` (they are case-insensitive). If the value is ``None`` (case-insensitive) both public and private flavors will be listed in a single request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort_key', 'sort_dir', 'limit', 'marker', 'min_disk', 'min_ram', 'is_public']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_flavors_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort_key' in params:
            query_params.append(('sort_key', params['sort_key']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501
        if 'min_disk' in params:
            query_params.append(('minDisk', params['min_disk']))  # noqa: E501
        if 'min_ram' in params:
            query_params.append(('minRam', params['min_ram']))  # noqa: E501
        if 'is_public' in params:
            query_params.append(('is_public', params['is_public']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/flavors/detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_flavors_flavor_id_delete(self, flavor_id, **kwargs):  # noqa: E501
        """v21_flavors_flavor_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_flavor_id_delete(flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor_id: The ID of the flavor.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_flavors_flavor_id_delete_with_http_info(flavor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_flavors_flavor_id_delete_with_http_info(flavor_id, **kwargs)  # noqa: E501
            return data

    def v21_flavors_flavor_id_delete_with_http_info(self, flavor_id, **kwargs):  # noqa: E501
        """v21_flavors_flavor_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_flavor_id_delete_with_http_info(flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor_id: The ID of the flavor.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_flavors_flavor_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor_id' is set
        if self.api_client.client_side_validation and ('flavor_id' not in params or
                                                       params['flavor_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `flavor_id` when calling `v21_flavors_flavor_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor_id' in params:
            path_params['flavor_id'] = params['flavor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/flavors/{flavor_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_flavors_flavor_id_get(self, flavor_id, **kwargs):  # noqa: E501
        """v21_flavors_flavor_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_flavor_id_get(flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor_id: The ID of the flavor.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_flavors_flavor_id_get_with_http_info(flavor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_flavors_flavor_id_get_with_http_info(flavor_id, **kwargs)  # noqa: E501
            return data

    def v21_flavors_flavor_id_get_with_http_info(self, flavor_id, **kwargs):  # noqa: E501
        """v21_flavors_flavor_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_flavor_id_get_with_http_info(flavor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor_id: The ID of the flavor.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_flavors_flavor_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor_id' is set
        if self.api_client.client_side_validation and ('flavor_id' not in params or
                                                       params['flavor_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `flavor_id` when calling `v21_flavors_flavor_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor_id' in params:
            path_params['flavor_id'] = params['flavor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/flavors/{flavor_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_flavors_flavor_id_put(self, flavor_id, flavor_update_req, **kwargs):  # noqa: E501
        """v21_flavors_flavor_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_flavor_id_put(flavor_id, flavor_update_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor_id: The ID of the flavor.  (required)
        :param FlavorUpdateReq flavor_update_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_flavors_flavor_id_put_with_http_info(flavor_id, flavor_update_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_flavors_flavor_id_put_with_http_info(flavor_id, flavor_update_req, **kwargs)  # noqa: E501
            return data

    def v21_flavors_flavor_id_put_with_http_info(self, flavor_id, flavor_update_req, **kwargs):  # noqa: E501
        """v21_flavors_flavor_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_flavor_id_put_with_http_info(flavor_id, flavor_update_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor_id: The ID of the flavor.  (required)
        :param FlavorUpdateReq flavor_update_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor_id', 'flavor_update_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_flavors_flavor_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor_id' is set
        if self.api_client.client_side_validation and ('flavor_id' not in params or
                                                       params['flavor_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `flavor_id` when calling `v21_flavors_flavor_id_put`")  # noqa: E501
        # verify the required parameter 'flavor_update_req' is set
        if self.api_client.client_side_validation and ('flavor_update_req' not in params or
                                                       params['flavor_update_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `flavor_update_req` when calling `v21_flavors_flavor_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor_id' in params:
            path_params['flavor_id'] = params['flavor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flavor_update_req' in params:
            body_params = params['flavor_update_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/flavors/{flavor_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_flavors_get(self, **kwargs):  # noqa: E501
        """v21_flavors_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort_key: Sorts by a flavor attribute. Default attribute is ``flavorid``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. The sort keys are limited to:  - ``created_at`` - ``description`` - ``disabled`` - ``ephemeral_gb`` - ``flavorid`` - ``id`` - ``is_public`` - ``memory_mb`` - ``name`` - ``root_gb`` - ``rxtx_factor`` - ``swap`` - ``updated_at`` - ``vcpu_weight`` - ``vcpus`` 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``asc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str is_public: This parameter is only applicable to users with the administrative role. For all other non-admin users, the parameter is ignored and only public flavors will be returned. Filters the flavor list based on whether the flavor is public or private. If the value of this parameter is not specified, it is treated as ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False`` (they are case-insensitive). If the value is ``None`` (case-insensitive) both public and private flavors will be listed in a single request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_flavors_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_flavors_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_flavors_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_flavors_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort_key: Sorts by a flavor attribute. Default attribute is ``flavorid``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. The sort keys are limited to:  - ``created_at`` - ``description`` - ``disabled`` - ``ephemeral_gb`` - ``flavorid`` - ``id`` - ``is_public`` - ``memory_mb`` - ``name`` - ``root_gb`` - ``rxtx_factor`` - ``swap`` - ``updated_at`` - ``vcpu_weight`` - ``vcpus`` 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``asc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the flavor ``sort_key`` attribute. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str is_public: This parameter is only applicable to users with the administrative role. For all other non-admin users, the parameter is ignored and only public flavors will be returned. Filters the flavor list based on whether the flavor is public or private. If the value of this parameter is not specified, it is treated as ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False`` (they are case-insensitive). If the value is ``None`` (case-insensitive) both public and private flavors will be listed in a single request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort_key', 'sort_dir', 'limit', 'marker', 'min_disk', 'min_ram', 'is_public']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_flavors_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort_key' in params:
            query_params.append(('sort_key', params['sort_key']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501
        if 'min_disk' in params:
            query_params.append(('minDisk', params['min_disk']))  # noqa: E501
        if 'min_ram' in params:
            query_params.append(('minRam', params['min_ram']))  # noqa: E501
        if 'is_public' in params:
            query_params.append(('is_public', params['is_public']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/flavors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_flavors_post(self, flavor_create_post_req, **kwargs):  # noqa: E501
        """v21_flavors_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_post(flavor_create_post_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FlavorCreatePostReq flavor_create_post_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_flavors_post_with_http_info(flavor_create_post_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_flavors_post_with_http_info(flavor_create_post_req, **kwargs)  # noqa: E501
            return data

    def v21_flavors_post_with_http_info(self, flavor_create_post_req, **kwargs):  # noqa: E501
        """v21_flavors_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_flavors_post_with_http_info(flavor_create_post_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FlavorCreatePostReq flavor_create_post_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor_create_post_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_flavors_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor_create_post_req' is set
        if self.api_client.client_side_validation and ('flavor_create_post_req' not in params or
                                                       params['flavor_create_post_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `flavor_create_post_req` when calling `v21_flavors_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flavor_create_post_req' in params:
            body_params = params['flavor_create_post_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/flavors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
