# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v21_images_detail_get(self, **kwargs):  # noqa: E501
        """v21_images_detail_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str changes_since: Filters the response by a date and time when the image last changed status. Use this query parameter to check for changes since a previous request rather than re-downloading and re-parsing the full status at each polling interval. If data has changed, the call returns only the items changed since the ``changes-since`` time. If data has not changed since the ``changes-since`` time, the call returns an empty list. To enable you to keep track of changes, this filter also displays images that were deleted if the ``changes-since`` value specifies a date in the last 30 days. Items deleted more than 30 days ago might be returned, but it is not guaranteed. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:  ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. 
        :param str server: Filters the response by a server, as a URL. 
        :param str name: Filters the response by an image name, as a string. 
        :param str status: Filters the response by an image status, as a string. For example, ``ACTIVE``. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str type: Filters the response by an image type. For example, ``snapshot`` or ``backup``. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_images_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_images_detail_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str changes_since: Filters the response by a date and time when the image last changed status. Use this query parameter to check for changes since a previous request rather than re-downloading and re-parsing the full status at each polling interval. If data has changed, the call returns only the items changed since the ``changes-since`` time. If data has not changed since the ``changes-since`` time, the call returns an empty list. To enable you to keep track of changes, this filter also displays images that were deleted if the ``changes-since`` value specifies a date in the last 30 days. Items deleted more than 30 days ago might be returned, but it is not guaranteed. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:  ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. 
        :param str server: Filters the response by a server, as a URL. 
        :param str name: Filters the response by an image name, as a string. 
        :param str status: Filters the response by an image status, as a string. For example, ``ACTIVE``. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str type: Filters the response by an image type. For example, ``snapshot`` or ``backup``. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['changes_since', 'server', 'name', 'status', 'min_disk', 'min_ram', 'type', 'limit', 'marker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'changes_since' in params:
            query_params.append(('changes-since', params['changes_since']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'min_disk' in params:
            query_params.append(('minDisk', params['min_disk']))  # noqa: E501
        if 'min_ram' in params:
            query_params.append(('minRam', params['min_ram']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_get(self, **kwargs):  # noqa: E501
        """v21_images_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str changes_since: Filters the response by a date and time when the image last changed status. Use this query parameter to check for changes since a previous request rather than re-downloading and re-parsing the full status at each polling interval. If data has changed, the call returns only the items changed since the ``changes-since`` time. If data has not changed since the ``changes-since`` time, the call returns an empty list. To enable you to keep track of changes, this filter also displays images that were deleted if the ``changes-since`` value specifies a date in the last 30 days. Items deleted more than 30 days ago might be returned, but it is not guaranteed. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:  ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. 
        :param str server: Filters the response by a server, as a URL. 
        :param str name: Filters the response by an image name, as a string. 
        :param str status: Filters the response by an image status, as a string. For example, ``ACTIVE``. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str type: Filters the response by an image type. For example, ``snapshot`` or ``backup``. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_images_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_images_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str changes_since: Filters the response by a date and time when the image last changed status. Use this query parameter to check for changes since a previous request rather than re-downloading and re-parsing the full status at each polling interval. If data has changed, the call returns only the items changed since the ``changes-since`` time. If data has not changed since the ``changes-since`` time, the call returns an empty list. To enable you to keep track of changes, this filter also displays images that were deleted if the ``changes-since`` value specifies a date in the last 30 days. Items deleted more than 30 days ago might be returned, but it is not guaranteed. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:  ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. 
        :param str server: Filters the response by a server, as a URL. 
        :param str name: Filters the response by an image name, as a string. 
        :param str status: Filters the response by an image status, as a string. For example, ``ACTIVE``. 
        :param int min_disk: Filters the response by a minimum disk space, in GiB. For example, ``100``. 
        :param int min_ram: Filters the response by a minimum RAM, in MiB. For example, ``512``. 
        :param str type: Filters the response by an image type. For example, ``snapshot`` or ``backup``. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['changes_since', 'server', 'name', 'status', 'min_disk', 'min_ram', 'type', 'limit', 'marker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'changes_since' in params:
            query_params.append(('changes-since', params['changes_since']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'min_disk' in params:
            query_params.append(('minDisk', params['min_disk']))  # noqa: E501
        if 'min_ram' in params:
            query_params.append(('minRam', params['min_ram']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_delete(self, image_id, **kwargs):  # noqa: E501
        """v21_images_image_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_delete(image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_delete_with_http_info(image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_delete_with_http_info(image_id, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_delete_with_http_info(self, image_id, **kwargs):  # noqa: E501
        """v21_images_image_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_delete_with_http_info(image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_get(self, image_id, **kwargs):  # noqa: E501
        """v21_images_image_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_get(image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_get_with_http_info(image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_get_with_http_info(image_id, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_get_with_http_info(self, image_id, **kwargs):  # noqa: E501
        """v21_images_image_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_get_with_http_info(image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_metadata_get(self, image_id, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_get(image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_metadata_get_with_http_info(image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_metadata_get_with_http_info(image_id, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_metadata_get_with_http_info(self, image_id, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_get_with_http_info(image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_metadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_metadata_key_delete(self, image_id, key, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_key_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_key_delete(image_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param str key: The metadata item key, as a string. Maximum length is 255 characters.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_metadata_key_delete_with_http_info(image_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_metadata_key_delete_with_http_info(image_id, key, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_metadata_key_delete_with_http_info(self, image_id, key, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_key_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_key_delete_with_http_info(image_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param str key: The metadata item key, as a string. Maximum length is 255 characters.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_metadata_key_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_metadata_key_delete`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `v21_images_image_id_metadata_key_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}/metadata/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_metadata_key_get(self, image_id, key, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_key_get(image_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param str key: The metadata item key, as a string. Maximum length is 255 characters.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_metadata_key_get_with_http_info(image_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_metadata_key_get_with_http_info(image_id, key, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_metadata_key_get_with_http_info(self, image_id, key, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_key_get_with_http_info(image_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param str key: The metadata item key, as a string. Maximum length is 255 characters.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_metadata_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_metadata_key_get`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `v21_images_image_id_metadata_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}/metadata/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_metadata_key_put(self, image_id, key, image_meta_key_put_req, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_key_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_key_put(image_id, key, image_meta_key_put_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param str key: The metadata item key, as a string. Maximum length is 255 characters.  (required)
        :param ImageMetaKeyPutReq image_meta_key_put_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_metadata_key_put_with_http_info(image_id, key, image_meta_key_put_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_metadata_key_put_with_http_info(image_id, key, image_meta_key_put_req, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_metadata_key_put_with_http_info(self, image_id, key, image_meta_key_put_req, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_key_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_key_put_with_http_info(image_id, key, image_meta_key_put_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param str key: The metadata item key, as a string. Maximum length is 255 characters.  (required)
        :param ImageMetaKeyPutReq image_meta_key_put_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'key', 'image_meta_key_put_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_metadata_key_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_metadata_key_put`")  # noqa: E501
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `v21_images_image_id_metadata_key_put`")  # noqa: E501
        # verify the required parameter 'image_meta_key_put_req' is set
        if self.api_client.client_side_validation and ('image_meta_key_put_req' not in params or
                                                       params['image_meta_key_put_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_meta_key_put_req` when calling `v21_images_image_id_metadata_key_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image_meta_key_put_req' in params:
            body_params = params['image_meta_key_put_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}/metadata/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_metadata_post(self, image_id, image_metadata_post_req, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_post(image_id, image_metadata_post_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param ImageMetadataPostReq image_metadata_post_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_metadata_post_with_http_info(image_id, image_metadata_post_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_metadata_post_with_http_info(image_id, image_metadata_post_req, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_metadata_post_with_http_info(self, image_id, image_metadata_post_req, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_post_with_http_info(image_id, image_metadata_post_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param ImageMetadataPostReq image_metadata_post_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'image_metadata_post_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_metadata_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_metadata_post`")  # noqa: E501
        # verify the required parameter 'image_metadata_post_req' is set
        if self.api_client.client_side_validation and ('image_metadata_post_req' not in params or
                                                       params['image_metadata_post_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_metadata_post_req` when calling `v21_images_image_id_metadata_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image_metadata_post_req' in params:
            body_params = params['image_metadata_post_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_images_image_id_metadata_put(self, image_id, image_metadata_put_req, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_put(image_id, image_metadata_put_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param ImageMetadataPutReq image_metadata_put_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_images_image_id_metadata_put_with_http_info(image_id, image_metadata_put_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_images_image_id_metadata_put_with_http_info(image_id, image_metadata_put_req, **kwargs)  # noqa: E501
            return data

    def v21_images_image_id_metadata_put_with_http_info(self, image_id, image_metadata_put_req, **kwargs):  # noqa: E501
        """v21_images_image_id_metadata_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_images_image_id_metadata_put_with_http_info(image_id, image_metadata_put_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_id: The UUID of the image.  (required)
        :param ImageMetadataPutReq image_metadata_put_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'image_metadata_put_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_images_image_id_metadata_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if self.api_client.client_side_validation and ('image_id' not in params or
                                                       params['image_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_id` when calling `v21_images_image_id_metadata_put`")  # noqa: E501
        # verify the required parameter 'image_metadata_put_req' is set
        if self.api_client.client_side_validation and ('image_metadata_put_req' not in params or
                                                       params['image_metadata_put_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `image_metadata_put_req` when calling `v21_images_image_id_metadata_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image_metadata_put_req' in params:
            body_params = params['image_metadata_put_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/images/{image_id}/metadata', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
