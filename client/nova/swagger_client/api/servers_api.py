# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v21_servers_detail_get(self, **kwargs):  # noqa: E501
        """v21_servers_detail_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_ip_v4: Filter server list result by IPv4 address that should be used to access the server. 
        :param str access_ip_v6: Filter server list result by IPv6 address that should be used to access the server. 
        :param bool all_tenants: Specify the ``all_tenants`` query parameter to list all instances for all projects. By default this is only allowed by administrators. If this parameter is specified without a value, the value defaults to ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) 
        :param str auto_disk_config: Filter the server list result by the ``disk_config`` setting of the server, Valid values are:  - ``AUTO`` - ``MANUAL``  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str availability_zone: Filter the server list result by server availability zone.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str changes_since: Filters the response by a date and time stamp when the server last changed status. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-since`` must be earlier than or equal to the value of the ``changes-before`` otherwise API will return 400. 
        :param str config_drive: Filter the server list result by the config drive setting of the server.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str created_at: Filter the server list result by a date and time stamp when server was created.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param bool deleted: Show deleted items only. In some circumstances deleted items will still be accessible via the backend database, however there is no contract on how long, so this parameter should be used with caution. ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True`` (case-insensitive). Other than them are treated as ``False``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str description: Filter the server list result by description.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored.  .. note::     ``display_description`` can also be requested which is alias of    ``description`` but that is not recommended to use as that will    be removed in future. 
        :param str flavor: Filters the response by a flavor, as a UUID. A flavor is a combination of memory, disk size, and CPUs. 
        :param str host: Filter the server list result by the host name of compute node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str hostname: Filter the server list result by the host name of server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str image: Filters the response by an image, as a UUID.  .. note::     'image_ref' can also be requested which is alias of 'image'    but that is not recommended to use as that will be removed in future. 
        :param str ip: An IPv4 address to filter results by. 
        :param str ip6: An IPv6 address to filter results by.  Up to microversion 2.4, this parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. Starting from microversion 2.5, this parameter is valid for no-admin users as well as administrators. 
        :param str kernel_id: Filter the server list result by the UUID of the kernel image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str key_name: Filter the server list result by keypair name.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int launch_index: Filter the server list result by the sequence in which the servers were launched.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str launched_at: Filter the server list result by a date and time stamp when the instance was launched. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str locked_by: Filter the server list result by who locked the server, possible value could be ``admin`` or ``owner``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str name: Filters the response by a server name, as a string.  You can use regular expressions in the query. For example, the ``?name=bob`` regular expression returns both bob and bobb. If you must match on only bob, you can use a regular expression that matches the syntax of the underlying database server that is implemented for Compute, such as MySQL or PostgreSQL.  .. note::     'display_name' can also be requested which is alias of 'name'    but that is not recommended to use as that will be removed in future. 
        :param str node: Filter the server list result by the node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param int power_state: Filter the server list result by server power state.  Possible values are integer values that is mapped as::    0: NOSTATE   1: RUNNING   3: PAUSED   4: SHUTDOWN   6: CRASHED   7: SUSPENDED  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int progress: Filter the server list result by the progress of the server. The value could be from 0 to 100 as integer.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str project_id: Filter the list of servers by the given project ID.  This filter only works when the ``all_tenants`` filter is also specified.  .. note::     'tenant_id' can also be requested which is alias of 'project_id'    but that is not recommended to use as that will be removed in future. 
        :param str ramdisk_id: Filter the server list result by the UUID of the ramdisk image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str reservation_id: A reservation id as returned by a servers multiple create call. 
        :param str root_device_name: Filter the server list result by the root device name of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param bool soft_deleted: Filter the server list by ``SOFT_DELETED`` status. This parameter is only valid when the ``deleted=True`` filter parameter is specified. 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``desc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. 
        :param str sort_key: Sorts by a server attribute. Default attribute is ``created_at``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. The sort keys are limited to:  - ``access_ip_v4`` - ``access_ip_v6`` - ``auto_disk_config`` - ``availability_zone`` - ``config_drive`` - ``created_at`` - ``display_description`` - ``display_name`` - ``host`` - ``hostname`` - ``image_ref`` - ``instance_type_id`` - ``kernel_id`` - ``key_name`` - ``launch_index`` - ``launched_at`` - ``locked`` (New in version 2.73) - ``locked_by`` - ``node`` - ``power_state`` - ``progress`` - ``project_id`` - ``ramdisk_id`` - ``root_device_name`` - ``task_state`` - ``terminated_at`` - ``updated_at`` - ``user_id`` - ``uuid`` - ``vm_state``  ``host`` and ``node`` are only allowed for admin. If non-admin users specify them, a 403 error is returned. 
        :param str status: Filters the response by a server status, as a string. For example, ``ACTIVE``.  Up to microversion 2.37, an empty list is returned if an invalid status is specified. Starting from microversion 2.38, a 400 error is returned in that case. 
        :param str task_state: Filter the server list result by task state.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str terminated_at: Filter the server list result by a date and time stamp when instance was terminated. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str user_id: Filter the list of servers by the given user ID.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str uuid: Filter the server list result by the UUID of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str vm_state: Filter the server list result by vm state.  The value could be:  - ``ACTIVE`` - ``BUILDING`` - ``DELETED`` - ``ERROR`` - ``PAUSED`` - ``RESCUED`` - ``RESIZED`` - ``SHELVED`` - ``SHELVED_OFFLOADED`` - ``SOFT_DELETED`` - ``STOPPED`` - ``SUSPENDED``  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str not_tags: A list of tags to filter the server list by. Servers that don't match all tags in this list will be returned. Boolean expression in this case is 'NOT (t1 AND t2)'. Tags in query must be separated by comma. 
        :param str not_tags_any: A list of tags to filter the server list by. Servers that don't match any tags in this list will be returned. Boolean expression in this case is 'NOT (t1 OR t2)'. Tags in query must be separated by comma. 
        :param str tags: A list of tags to filter the server list by. Servers that match all tags in this list will be returned. Boolean expression in this case is 't1 AND t2'. Tags in query must be separated by comma. 
        :param str tags_any: A list of tags to filter the server list by. Servers that match any tag in this list will be returned. Boolean expression in this case is 't1 OR t2'. Tags in query must be separated by comma. 
        :param str changes_before: Filters the response by a date and time stamp when the server last changed. Those servers that changed before or equal to the specified date and time stamp are returned. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-before`` must be later than or equal to the value of the ``changes-since`` otherwise API will return 400. 
        :param bool locked: Specify the ``locked`` query parameter to list all locked or unlocked instances. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) Any other value provided will be considered invalid. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_servers_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_servers_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_servers_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_servers_detail_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_ip_v4: Filter server list result by IPv4 address that should be used to access the server. 
        :param str access_ip_v6: Filter server list result by IPv6 address that should be used to access the server. 
        :param bool all_tenants: Specify the ``all_tenants`` query parameter to list all instances for all projects. By default this is only allowed by administrators. If this parameter is specified without a value, the value defaults to ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) 
        :param str auto_disk_config: Filter the server list result by the ``disk_config`` setting of the server, Valid values are:  - ``AUTO`` - ``MANUAL``  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str availability_zone: Filter the server list result by server availability zone.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str changes_since: Filters the response by a date and time stamp when the server last changed status. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-since`` must be earlier than or equal to the value of the ``changes-before`` otherwise API will return 400. 
        :param str config_drive: Filter the server list result by the config drive setting of the server.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str created_at: Filter the server list result by a date and time stamp when server was created.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param bool deleted: Show deleted items only. In some circumstances deleted items will still be accessible via the backend database, however there is no contract on how long, so this parameter should be used with caution. ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True`` (case-insensitive). Other than them are treated as ``False``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str description: Filter the server list result by description.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored.  .. note::     ``display_description`` can also be requested which is alias of    ``description`` but that is not recommended to use as that will    be removed in future. 
        :param str flavor: Filters the response by a flavor, as a UUID. A flavor is a combination of memory, disk size, and CPUs. 
        :param str host: Filter the server list result by the host name of compute node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str hostname: Filter the server list result by the host name of server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str image: Filters the response by an image, as a UUID.  .. note::     'image_ref' can also be requested which is alias of 'image'    but that is not recommended to use as that will be removed in future. 
        :param str ip: An IPv4 address to filter results by. 
        :param str ip6: An IPv6 address to filter results by.  Up to microversion 2.4, this parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. Starting from microversion 2.5, this parameter is valid for no-admin users as well as administrators. 
        :param str kernel_id: Filter the server list result by the UUID of the kernel image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str key_name: Filter the server list result by keypair name.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int launch_index: Filter the server list result by the sequence in which the servers were launched.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str launched_at: Filter the server list result by a date and time stamp when the instance was launched. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str locked_by: Filter the server list result by who locked the server, possible value could be ``admin`` or ``owner``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str name: Filters the response by a server name, as a string.  You can use regular expressions in the query. For example, the ``?name=bob`` regular expression returns both bob and bobb. If you must match on only bob, you can use a regular expression that matches the syntax of the underlying database server that is implemented for Compute, such as MySQL or PostgreSQL.  .. note::     'display_name' can also be requested which is alias of 'name'    but that is not recommended to use as that will be removed in future. 
        :param str node: Filter the server list result by the node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param int power_state: Filter the server list result by server power state.  Possible values are integer values that is mapped as::    0: NOSTATE   1: RUNNING   3: PAUSED   4: SHUTDOWN   6: CRASHED   7: SUSPENDED  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int progress: Filter the server list result by the progress of the server. The value could be from 0 to 100 as integer.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str project_id: Filter the list of servers by the given project ID.  This filter only works when the ``all_tenants`` filter is also specified.  .. note::     'tenant_id' can also be requested which is alias of 'project_id'    but that is not recommended to use as that will be removed in future. 
        :param str ramdisk_id: Filter the server list result by the UUID of the ramdisk image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str reservation_id: A reservation id as returned by a servers multiple create call. 
        :param str root_device_name: Filter the server list result by the root device name of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param bool soft_deleted: Filter the server list by ``SOFT_DELETED`` status. This parameter is only valid when the ``deleted=True`` filter parameter is specified. 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``desc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. 
        :param str sort_key: Sorts by a server attribute. Default attribute is ``created_at``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. The sort keys are limited to:  - ``access_ip_v4`` - ``access_ip_v6`` - ``auto_disk_config`` - ``availability_zone`` - ``config_drive`` - ``created_at`` - ``display_description`` - ``display_name`` - ``host`` - ``hostname`` - ``image_ref`` - ``instance_type_id`` - ``kernel_id`` - ``key_name`` - ``launch_index`` - ``launched_at`` - ``locked`` (New in version 2.73) - ``locked_by`` - ``node`` - ``power_state`` - ``progress`` - ``project_id`` - ``ramdisk_id`` - ``root_device_name`` - ``task_state`` - ``terminated_at`` - ``updated_at`` - ``user_id`` - ``uuid`` - ``vm_state``  ``host`` and ``node`` are only allowed for admin. If non-admin users specify them, a 403 error is returned. 
        :param str status: Filters the response by a server status, as a string. For example, ``ACTIVE``.  Up to microversion 2.37, an empty list is returned if an invalid status is specified. Starting from microversion 2.38, a 400 error is returned in that case. 
        :param str task_state: Filter the server list result by task state.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str terminated_at: Filter the server list result by a date and time stamp when instance was terminated. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str user_id: Filter the list of servers by the given user ID.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str uuid: Filter the server list result by the UUID of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str vm_state: Filter the server list result by vm state.  The value could be:  - ``ACTIVE`` - ``BUILDING`` - ``DELETED`` - ``ERROR`` - ``PAUSED`` - ``RESCUED`` - ``RESIZED`` - ``SHELVED`` - ``SHELVED_OFFLOADED`` - ``SOFT_DELETED`` - ``STOPPED`` - ``SUSPENDED``  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str not_tags: A list of tags to filter the server list by. Servers that don't match all tags in this list will be returned. Boolean expression in this case is 'NOT (t1 AND t2)'. Tags in query must be separated by comma. 
        :param str not_tags_any: A list of tags to filter the server list by. Servers that don't match any tags in this list will be returned. Boolean expression in this case is 'NOT (t1 OR t2)'. Tags in query must be separated by comma. 
        :param str tags: A list of tags to filter the server list by. Servers that match all tags in this list will be returned. Boolean expression in this case is 't1 AND t2'. Tags in query must be separated by comma. 
        :param str tags_any: A list of tags to filter the server list by. Servers that match any tag in this list will be returned. Boolean expression in this case is 't1 OR t2'. Tags in query must be separated by comma. 
        :param str changes_before: Filters the response by a date and time stamp when the server last changed. Those servers that changed before or equal to the specified date and time stamp are returned. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-before`` must be later than or equal to the value of the ``changes-since`` otherwise API will return 400. 
        :param bool locked: Specify the ``locked`` query parameter to list all locked or unlocked instances. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) Any other value provided will be considered invalid. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_ip_v4', 'access_ip_v6', 'all_tenants', 'auto_disk_config', 'availability_zone', 'changes_since', 'config_drive', 'created_at', 'deleted', 'description', 'flavor', 'host', 'hostname', 'image', 'ip', 'ip6', 'kernel_id', 'key_name', 'launch_index', 'launched_at', 'limit', 'locked_by', 'marker', 'name', 'node', 'power_state', 'progress', 'project_id', 'ramdisk_id', 'reservation_id', 'root_device_name', 'soft_deleted', 'sort_dir', 'sort_key', 'status', 'task_state', 'terminated_at', 'user_id', 'uuid', 'vm_state', 'not_tags', 'not_tags_any', 'tags', 'tags_any', 'changes_before', 'locked']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_servers_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_ip_v4' in params:
            query_params.append(('access_ip_v4', params['access_ip_v4']))  # noqa: E501
        if 'access_ip_v6' in params:
            query_params.append(('access_ip_v6', params['access_ip_v6']))  # noqa: E501
        if 'all_tenants' in params:
            query_params.append(('all_tenants', params['all_tenants']))  # noqa: E501
        if 'auto_disk_config' in params:
            query_params.append(('auto_disk_config', params['auto_disk_config']))  # noqa: E501
        if 'availability_zone' in params:
            query_params.append(('availability_zone', params['availability_zone']))  # noqa: E501
        if 'changes_since' in params:
            query_params.append(('changes-since', params['changes_since']))  # noqa: E501
        if 'config_drive' in params:
            query_params.append(('config_drive', params['config_drive']))  # noqa: E501
        if 'created_at' in params:
            query_params.append(('created_at', params['created_at']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'flavor' in params:
            query_params.append(('flavor', params['flavor']))  # noqa: E501
        if 'host' in params:
            query_params.append(('host', params['host']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
        if 'image' in params:
            query_params.append(('image', params['image']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'ip6' in params:
            query_params.append(('ip6', params['ip6']))  # noqa: E501
        if 'kernel_id' in params:
            query_params.append(('kernel_id', params['kernel_id']))  # noqa: E501
        if 'key_name' in params:
            query_params.append(('key_name', params['key_name']))  # noqa: E501
        if 'launch_index' in params:
            query_params.append(('launch_index', params['launch_index']))  # noqa: E501
        if 'launched_at' in params:
            query_params.append(('launched_at', params['launched_at']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'locked_by' in params:
            query_params.append(('locked_by', params['locked_by']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'node' in params:
            query_params.append(('node', params['node']))  # noqa: E501
        if 'power_state' in params:
            query_params.append(('power_state', params['power_state']))  # noqa: E501
        if 'progress' in params:
            query_params.append(('progress', params['progress']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('project_id', params['project_id']))  # noqa: E501
        if 'ramdisk_id' in params:
            query_params.append(('ramdisk_id', params['ramdisk_id']))  # noqa: E501
        if 'reservation_id' in params:
            query_params.append(('reservation_id', params['reservation_id']))  # noqa: E501
        if 'root_device_name' in params:
            query_params.append(('root_device_name', params['root_device_name']))  # noqa: E501
        if 'soft_deleted' in params:
            query_params.append(('soft_deleted', params['soft_deleted']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'sort_key' in params:
            query_params.append(('sort_key', params['sort_key']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'task_state' in params:
            query_params.append(('task_state', params['task_state']))  # noqa: E501
        if 'terminated_at' in params:
            query_params.append(('terminated_at', params['terminated_at']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501
        if 'vm_state' in params:
            query_params.append(('vm_state', params['vm_state']))  # noqa: E501
        if 'not_tags' in params:
            query_params.append(('not-tags', params['not_tags']))  # noqa: E501
        if 'not_tags_any' in params:
            query_params.append(('not-tags-any', params['not_tags_any']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'tags_any' in params:
            query_params.append(('tags-any', params['tags_any']))  # noqa: E501
        if 'changes_before' in params:
            query_params.append(('changes-before', params['changes_before']))  # noqa: E501
        if 'locked' in params:
            query_params.append(('locked', params['locked']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/servers/detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_servers_get(self, **kwargs):  # noqa: E501
        """v21_servers_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_ip_v4: Filter server list result by IPv4 address that should be used to access the server. 
        :param str access_ip_v6: Filter server list result by IPv6 address that should be used to access the server. 
        :param bool all_tenants: Specify the ``all_tenants`` query parameter to list all instances for all projects. By default this is only allowed by administrators. If this parameter is specified without a value, the value defaults to ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) 
        :param str auto_disk_config: Filter the server list result by the ``disk_config`` setting of the server, Valid values are:  - ``AUTO`` - ``MANUAL``  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str availability_zone: Filter the server list result by server availability zone.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str changes_since: Filters the response by a date and time stamp when the server last changed status. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-since`` must be earlier than or equal to the value of the ``changes-before`` otherwise API will return 400. 
        :param str config_drive: Filter the server list result by the config drive setting of the server.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str created_at: Filter the server list result by a date and time stamp when server was created.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param bool deleted: Show deleted items only. In some circumstances deleted items will still be accessible via the backend database, however there is no contract on how long, so this parameter should be used with caution. ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True`` (case-insensitive). Other than them are treated as ``False``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str description: Filter the server list result by description.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored.  .. note::     ``display_description`` can also be requested which is alias of    ``description`` but that is not recommended to use as that will    be removed in future. 
        :param str flavor: Filters the response by a flavor, as a UUID. A flavor is a combination of memory, disk size, and CPUs. 
        :param str host: Filter the server list result by the host name of compute node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str hostname: Filter the server list result by the host name of server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str image: Filters the response by an image, as a UUID.  .. note::     'image_ref' can also be requested which is alias of 'image'    but that is not recommended to use as that will be removed in future. 
        :param str ip: An IPv4 address to filter results by. 
        :param str ip6: An IPv6 address to filter results by.  Up to microversion 2.4, this parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. Starting from microversion 2.5, this parameter is valid for no-admin users as well as administrators. 
        :param str kernel_id: Filter the server list result by the UUID of the kernel image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str key_name: Filter the server list result by keypair name.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int launch_index: Filter the server list result by the sequence in which the servers were launched.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str launched_at: Filter the server list result by a date and time stamp when the instance was launched. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str locked_by: Filter the server list result by who locked the server, possible value could be ``admin`` or ``owner``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str name: Filters the response by a server name, as a string.  You can use regular expressions in the query. For example, the ``?name=bob`` regular expression returns both bob and bobb. If you must match on only bob, you can use a regular expression that matches the syntax of the underlying database server that is implemented for Compute, such as MySQL or PostgreSQL.  .. note::     'display_name' can also be requested which is alias of 'name'    but that is not recommended to use as that will be removed in future. 
        :param str node: Filter the server list result by the node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param int power_state: Filter the server list result by server power state.  Possible values are integer values that is mapped as::    0: NOSTATE   1: RUNNING   3: PAUSED   4: SHUTDOWN   6: CRASHED   7: SUSPENDED  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int progress: Filter the server list result by the progress of the server. The value could be from 0 to 100 as integer.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str project_id: Filter the list of servers by the given project ID.  This filter only works when the ``all_tenants`` filter is also specified.  .. note::     'tenant_id' can also be requested which is alias of 'project_id'    but that is not recommended to use as that will be removed in future. 
        :param str ramdisk_id: Filter the server list result by the UUID of the ramdisk image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str reservation_id: A reservation id as returned by a servers multiple create call. 
        :param str root_device_name: Filter the server list result by the root device name of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param bool soft_deleted: Filter the server list by ``SOFT_DELETED`` status. This parameter is only valid when the ``deleted=True`` filter parameter is specified. 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``desc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. 
        :param str sort_key: Sorts by a server attribute. Default attribute is ``created_at``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. The sort keys are limited to:  - ``access_ip_v4`` - ``access_ip_v6`` - ``auto_disk_config`` - ``availability_zone`` - ``config_drive`` - ``created_at`` - ``display_description`` - ``display_name`` - ``host`` - ``hostname`` - ``image_ref`` - ``instance_type_id`` - ``kernel_id`` - ``key_name`` - ``launch_index`` - ``launched_at`` - ``locked`` (New in version 2.73) - ``locked_by`` - ``node`` - ``power_state`` - ``progress`` - ``project_id`` - ``ramdisk_id`` - ``root_device_name`` - ``task_state`` - ``terminated_at`` - ``updated_at`` - ``user_id`` - ``uuid`` - ``vm_state``  ``host`` and ``node`` are only allowed for admin. If non-admin users specify them, a 403 error is returned. 
        :param str status: Filters the response by a server status, as a string. For example, ``ACTIVE``.  Up to microversion 2.37, an empty list is returned if an invalid status is specified. Starting from microversion 2.38, a 400 error is returned in that case. 
        :param str task_state: Filter the server list result by task state.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str terminated_at: Filter the server list result by a date and time stamp when instance was terminated. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str user_id: Filter the list of servers by the given user ID.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str uuid: Filter the server list result by the UUID of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str vm_state: Filter the server list result by vm state.  The value could be:  - ``ACTIVE`` - ``BUILDING`` - ``DELETED`` - ``ERROR`` - ``PAUSED`` - ``RESCUED`` - ``RESIZED`` - ``SHELVED`` - ``SHELVED_OFFLOADED`` - ``SOFT_DELETED`` - ``STOPPED`` - ``SUSPENDED``  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str not_tags: A list of tags to filter the server list by. Servers that don't match all tags in this list will be returned. Boolean expression in this case is 'NOT (t1 AND t2)'. Tags in query must be separated by comma. 
        :param str not_tags_any: A list of tags to filter the server list by. Servers that don't match any tags in this list will be returned. Boolean expression in this case is 'NOT (t1 OR t2)'. Tags in query must be separated by comma. 
        :param str tags: A list of tags to filter the server list by. Servers that match all tags in this list will be returned. Boolean expression in this case is 't1 AND t2'. Tags in query must be separated by comma. 
        :param str tags_any: A list of tags to filter the server list by. Servers that match any tag in this list will be returned. Boolean expression in this case is 't1 OR t2'. Tags in query must be separated by comma. 
        :param str changes_before: Filters the response by a date and time stamp when the server last changed. Those servers that changed before or equal to the specified date and time stamp are returned. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-before`` must be later than or equal to the value of the ``changes-since`` otherwise API will return 400. 
        :param bool locked: Specify the ``locked`` query parameter to list all locked or unlocked instances. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) Any other value provided will be considered invalid. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_servers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_servers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_servers_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_servers_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_ip_v4: Filter server list result by IPv4 address that should be used to access the server. 
        :param str access_ip_v6: Filter server list result by IPv6 address that should be used to access the server. 
        :param bool all_tenants: Specify the ``all_tenants`` query parameter to list all instances for all projects. By default this is only allowed by administrators. If this parameter is specified without a value, the value defaults to ``True``. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) 
        :param str auto_disk_config: Filter the server list result by the ``disk_config`` setting of the server, Valid values are:  - ``AUTO`` - ``MANUAL``  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str availability_zone: Filter the server list result by server availability zone.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str changes_since: Filters the response by a date and time stamp when the server last changed status. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-since`` must be earlier than or equal to the value of the ``changes-before`` otherwise API will return 400. 
        :param str config_drive: Filter the server list result by the config drive setting of the server.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str created_at: Filter the server list result by a date and time stamp when server was created.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param bool deleted: Show deleted items only. In some circumstances deleted items will still be accessible via the backend database, however there is no contract on how long, so this parameter should be used with caution. ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True`` (case-insensitive). Other than them are treated as ``False``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str description: Filter the server list result by description.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored.  .. note::     ``display_description`` can also be requested which is alias of    ``description`` but that is not recommended to use as that will    be removed in future. 
        :param str flavor: Filters the response by a flavor, as a UUID. A flavor is a combination of memory, disk size, and CPUs. 
        :param str host: Filter the server list result by the host name of compute node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str hostname: Filter the server list result by the host name of server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str image: Filters the response by an image, as a UUID.  .. note::     'image_ref' can also be requested which is alias of 'image'    but that is not recommended to use as that will be removed in future. 
        :param str ip: An IPv4 address to filter results by. 
        :param str ip6: An IPv6 address to filter results by.  Up to microversion 2.4, this parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. Starting from microversion 2.5, this parameter is valid for no-admin users as well as administrators. 
        :param str kernel_id: Filter the server list result by the UUID of the kernel image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str key_name: Filter the server list result by keypair name.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int launch_index: Filter the server list result by the sequence in which the servers were launched.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str launched_at: Filter the server list result by a date and time stamp when the instance was launched. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str locked_by: Filter the server list result by who locked the server, possible value could be ``admin`` or ``owner``.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str marker: The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited request and use the ID of the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str name: Filters the response by a server name, as a string.  You can use regular expressions in the query. For example, the ``?name=bob`` regular expression returns both bob and bobb. If you must match on only bob, you can use a regular expression that matches the syntax of the underlying database server that is implemented for Compute, such as MySQL or PostgreSQL.  .. note::     'display_name' can also be requested which is alias of 'name'    but that is not recommended to use as that will be removed in future. 
        :param str node: Filter the server list result by the node.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param int power_state: Filter the server list result by server power state.  Possible values are integer values that is mapped as::    0: NOSTATE   1: RUNNING   3: PAUSED   4: SHUTDOWN   6: CRASHED   7: SUSPENDED  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param int progress: Filter the server list result by the progress of the server. The value could be from 0 to 100 as integer.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str project_id: Filter the list of servers by the given project ID.  This filter only works when the ``all_tenants`` filter is also specified.  .. note::     'tenant_id' can also be requested which is alias of 'project_id'    but that is not recommended to use as that will be removed in future. 
        :param str ramdisk_id: Filter the server list result by the UUID of the ramdisk image when using an AMI.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str reservation_id: A reservation id as returned by a servers multiple create call. 
        :param str root_device_name: Filter the server list result by the root device name of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param bool soft_deleted: Filter the server list by ``SOFT_DELETED`` status. This parameter is only valid when the ``deleted=True`` filter parameter is specified. 
        :param str sort_dir: Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending). Default is ``desc``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. 
        :param str sort_key: Sorts by a server attribute. Default attribute is ``created_at``. You can specify multiple pairs of sort key and sort direction query parameters. If you omit the sort direction in a pair, the API uses the natural sorting direction of the server ``sort_key`` attribute. The sort keys are limited to:  - ``access_ip_v4`` - ``access_ip_v6`` - ``auto_disk_config`` - ``availability_zone`` - ``config_drive`` - ``created_at`` - ``display_description`` - ``display_name`` - ``host`` - ``hostname`` - ``image_ref`` - ``instance_type_id`` - ``kernel_id`` - ``key_name`` - ``launch_index`` - ``launched_at`` - ``locked`` (New in version 2.73) - ``locked_by`` - ``node`` - ``power_state`` - ``progress`` - ``project_id`` - ``ramdisk_id`` - ``root_device_name`` - ``task_state`` - ``terminated_at`` - ``updated_at`` - ``user_id`` - ``uuid`` - ``vm_state``  ``host`` and ``node`` are only allowed for admin. If non-admin users specify them, a 403 error is returned. 
        :param str status: Filters the response by a server status, as a string. For example, ``ACTIVE``.  Up to microversion 2.37, an empty list is returned if an invalid status is specified. Starting from microversion 2.38, a 400 error is returned in that case. 
        :param str task_state: Filter the server list result by task state.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str terminated_at: Filter the server list result by a date and time stamp when instance was terminated. The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str user_id: Filter the list of servers by the given user ID.  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str uuid: Filter the server list result by the UUID of the server.  This parameter is only valid when specified by administrators. If non-admin users specify this parameter, it is ignored. 
        :param str vm_state: Filter the server list result by vm state.  The value could be:  - ``ACTIVE`` - ``BUILDING`` - ``DELETED`` - ``ERROR`` - ``PAUSED`` - ``RESCUED`` - ``RESIZED`` - ``SHELVED`` - ``SHELVED_OFFLOADED`` - ``SOFT_DELETED`` - ``STOPPED`` - ``SUSPENDED``  This parameter is restricted to administrators until microversion 2.83. If non-admin users specify this parameter on a microversion less than 2.83, it will be ignored. 
        :param str not_tags: A list of tags to filter the server list by. Servers that don't match all tags in this list will be returned. Boolean expression in this case is 'NOT (t1 AND t2)'. Tags in query must be separated by comma. 
        :param str not_tags_any: A list of tags to filter the server list by. Servers that don't match any tags in this list will be returned. Boolean expression in this case is 'NOT (t1 OR t2)'. Tags in query must be separated by comma. 
        :param str tags: A list of tags to filter the server list by. Servers that match all tags in this list will be returned. Boolean expression in this case is 't1 AND t2'. Tags in query must be separated by comma. 
        :param str tags_any: A list of tags to filter the server list by. Servers that match any tag in this list will be returned. Boolean expression in this case is 't1 OR t2'. Tags in query must be separated by comma. 
        :param str changes_before: Filters the response by a date and time stamp when the server last changed. Those servers that changed before or equal to the specified date and time stamp are returned. To help keep track of changes this may also return recently deleted servers.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-before`` must be later than or equal to the value of the ``changes-since`` otherwise API will return 400. 
        :param bool locked: Specify the ``locked`` query parameter to list all locked or unlocked instances. If the value is specified, ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``. (They are case-insensitive.) Any other value provided will be considered invalid. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_ip_v4', 'access_ip_v6', 'all_tenants', 'auto_disk_config', 'availability_zone', 'changes_since', 'config_drive', 'created_at', 'deleted', 'description', 'flavor', 'host', 'hostname', 'image', 'ip', 'ip6', 'kernel_id', 'key_name', 'launch_index', 'launched_at', 'limit', 'locked_by', 'marker', 'name', 'node', 'power_state', 'progress', 'project_id', 'ramdisk_id', 'reservation_id', 'root_device_name', 'soft_deleted', 'sort_dir', 'sort_key', 'status', 'task_state', 'terminated_at', 'user_id', 'uuid', 'vm_state', 'not_tags', 'not_tags_any', 'tags', 'tags_any', 'changes_before', 'locked']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_servers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_ip_v4' in params:
            query_params.append(('access_ip_v4', params['access_ip_v4']))  # noqa: E501
        if 'access_ip_v6' in params:
            query_params.append(('access_ip_v6', params['access_ip_v6']))  # noqa: E501
        if 'all_tenants' in params:
            query_params.append(('all_tenants', params['all_tenants']))  # noqa: E501
        if 'auto_disk_config' in params:
            query_params.append(('auto_disk_config', params['auto_disk_config']))  # noqa: E501
        if 'availability_zone' in params:
            query_params.append(('availability_zone', params['availability_zone']))  # noqa: E501
        if 'changes_since' in params:
            query_params.append(('changes-since', params['changes_since']))  # noqa: E501
        if 'config_drive' in params:
            query_params.append(('config_drive', params['config_drive']))  # noqa: E501
        if 'created_at' in params:
            query_params.append(('created_at', params['created_at']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'flavor' in params:
            query_params.append(('flavor', params['flavor']))  # noqa: E501
        if 'host' in params:
            query_params.append(('host', params['host']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
        if 'image' in params:
            query_params.append(('image', params['image']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'ip6' in params:
            query_params.append(('ip6', params['ip6']))  # noqa: E501
        if 'kernel_id' in params:
            query_params.append(('kernel_id', params['kernel_id']))  # noqa: E501
        if 'key_name' in params:
            query_params.append(('key_name', params['key_name']))  # noqa: E501
        if 'launch_index' in params:
            query_params.append(('launch_index', params['launch_index']))  # noqa: E501
        if 'launched_at' in params:
            query_params.append(('launched_at', params['launched_at']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'locked_by' in params:
            query_params.append(('locked_by', params['locked_by']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'node' in params:
            query_params.append(('node', params['node']))  # noqa: E501
        if 'power_state' in params:
            query_params.append(('power_state', params['power_state']))  # noqa: E501
        if 'progress' in params:
            query_params.append(('progress', params['progress']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('project_id', params['project_id']))  # noqa: E501
        if 'ramdisk_id' in params:
            query_params.append(('ramdisk_id', params['ramdisk_id']))  # noqa: E501
        if 'reservation_id' in params:
            query_params.append(('reservation_id', params['reservation_id']))  # noqa: E501
        if 'root_device_name' in params:
            query_params.append(('root_device_name', params['root_device_name']))  # noqa: E501
        if 'soft_deleted' in params:
            query_params.append(('soft_deleted', params['soft_deleted']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'sort_key' in params:
            query_params.append(('sort_key', params['sort_key']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'task_state' in params:
            query_params.append(('task_state', params['task_state']))  # noqa: E501
        if 'terminated_at' in params:
            query_params.append(('terminated_at', params['terminated_at']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501
        if 'vm_state' in params:
            query_params.append(('vm_state', params['vm_state']))  # noqa: E501
        if 'not_tags' in params:
            query_params.append(('not-tags', params['not_tags']))  # noqa: E501
        if 'not_tags_any' in params:
            query_params.append(('not-tags-any', params['not_tags_any']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'tags_any' in params:
            query_params.append(('tags-any', params['tags_any']))  # noqa: E501
        if 'changes_before' in params:
            query_params.append(('changes-before', params['changes_before']))  # noqa: E501
        if 'locked' in params:
            query_params.append(('locked', params['locked']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_servers_post(self, server_create_req, **kwargs):  # noqa: E501
        """v21_servers_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_post(server_create_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServerCreateReq server_create_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_servers_post_with_http_info(server_create_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_servers_post_with_http_info(server_create_req, **kwargs)  # noqa: E501
            return data

    def v21_servers_post_with_http_info(self, server_create_req, **kwargs):  # noqa: E501
        """v21_servers_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_post_with_http_info(server_create_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServerCreateReq server_create_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_create_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_servers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_create_req' is set
        if self.api_client.client_side_validation and ('server_create_req' not in params or
                                                       params['server_create_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `server_create_req` when calling `v21_servers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'server_create_req' in params:
            body_params = params['server_create_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_servers_server_id_delete(self, server_id, **kwargs):  # noqa: E501
        """v21_servers_server_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_server_id_delete(server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_id: The UUID of the server.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_servers_server_id_delete_with_http_info(server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_servers_server_id_delete_with_http_info(server_id, **kwargs)  # noqa: E501
            return data

    def v21_servers_server_id_delete_with_http_info(self, server_id, **kwargs):  # noqa: E501
        """v21_servers_server_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_server_id_delete_with_http_info(server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_id: The UUID of the server.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_servers_server_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if self.api_client.client_side_validation and ('server_id' not in params or
                                                       params['server_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `server_id` when calling `v21_servers_server_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/servers/{server_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_servers_server_id_get(self, server_id, **kwargs):  # noqa: E501
        """v21_servers_server_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_server_id_get(server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_id: The UUID of the server.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_servers_server_id_get_with_http_info(server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_servers_server_id_get_with_http_info(server_id, **kwargs)  # noqa: E501
            return data

    def v21_servers_server_id_get_with_http_info(self, server_id, **kwargs):  # noqa: E501
        """v21_servers_server_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_server_id_get_with_http_info(server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_id: The UUID of the server.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_servers_server_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if self.api_client.client_side_validation and ('server_id' not in params or
                                                       params['server_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `server_id` when calling `v21_servers_server_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/servers/{server_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v21_servers_server_id_put(self, server_id, server_update_req, **kwargs):  # noqa: E501
        """v21_servers_server_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_server_id_put(server_id, server_update_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_id: The UUID of the server.  (required)
        :param ServerUpdateReq server_update_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_servers_server_id_put_with_http_info(server_id, server_update_req, **kwargs)  # noqa: E501
        else:
            (data) = self.v21_servers_server_id_put_with_http_info(server_id, server_update_req, **kwargs)  # noqa: E501
            return data

    def v21_servers_server_id_put_with_http_info(self, server_id, server_update_req, **kwargs):  # noqa: E501
        """v21_servers_server_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_servers_server_id_put_with_http_info(server_id, server_update_req, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_id: The UUID of the server.  (required)
        :param ServerUpdateReq server_update_req: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'server_update_req']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_servers_server_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if self.api_client.client_side_validation and ('server_id' not in params or
                                                       params['server_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `server_id` when calling `v21_servers_server_id_put`")  # noqa: E501
        # verify the required parameter 'server_update_req' is set
        if self.api_client.client_side_validation and ('server_update_req' not in params or
                                                       params['server_update_req'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `server_update_req` when calling `v21_servers_server_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'server_update_req' in params:
            body_params = params['server_update_req']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/servers/{server_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
