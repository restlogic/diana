# coding: utf-8

"""
    Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OsMigrationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v21_os_migrations_get(self, **kwargs):  # noqa: E501
        """v21_os_migrations_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_os_migrations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int hidden: The 'hidden' setting of migration to filter. The 'hidden' flag is set if the value is 1. The 'hidden' flag is not set if the value is 0. But the 'hidden' setting of migration is always 0, so this parameter is useless to filter migrations. 
        :param str host: The source/destination compute node of migration to filter. 
        :param str instance_uuid: The uuid of the instance that migration is operated on to filter. 
        :param str migration_type: The type of migration to filter. Valid values are:  * ``evacuation`` * ``live-migration`` * ``migration`` * ``resize`` 
        :param str source_compute: The source compute node of migration to filter. 
        :param str status: The status of migration to filter. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The UUID of the last-seen migration. Use the ``limit`` parameter to make an initial limited request and use the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str changes_since: Filters the response by a date and time stamp when the migration last changed. Those changed after the specified date and time stamp are returned.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-since`` must be earlier than or equal to the value of the ``changes-before`` otherwise API will return 400. 
        :param str changes_before: Filters the response by a date and time stamp when the migration last changed. Those migrations that changed before or equal to the specified date and time stamp are returned.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-before`` must be later than or equal to the value of the ``changes-since`` otherwise API will return 400. 
        :param str user_id: Filter the migrations by the given user ID. 
        :param str project_id: Filter the migrations by the given project ID. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v21_os_migrations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v21_os_migrations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v21_os_migrations_get_with_http_info(self, **kwargs):  # noqa: E501
        """v21_os_migrations_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v21_os_migrations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int hidden: The 'hidden' setting of migration to filter. The 'hidden' flag is set if the value is 1. The 'hidden' flag is not set if the value is 0. But the 'hidden' setting of migration is always 0, so this parameter is useless to filter migrations. 
        :param str host: The source/destination compute node of migration to filter. 
        :param str instance_uuid: The uuid of the instance that migration is operated on to filter. 
        :param str migration_type: The type of migration to filter. Valid values are:  * ``evacuation`` * ``live-migration`` * ``migration`` * ``resize`` 
        :param str source_compute: The source compute node of migration to filter. 
        :param str status: The status of migration to filter. 
        :param int limit: Requests a page size of items. Returns a number of items up to a limit value. Use the ``limit`` parameter to make an initial limited request and use the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str marker: The UUID of the last-seen migration. Use the ``limit`` parameter to make an initial limited request and use the last-seen item from the response as the ``marker`` parameter value in a subsequent limited request. 
        :param str changes_since: Filters the response by a date and time stamp when the migration last changed. Those changed after the specified date and time stamp are returned.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-since`` must be earlier than or equal to the value of the ``changes-before`` otherwise API will return 400. 
        :param str changes_before: Filters the response by a date and time stamp when the migration last changed. Those migrations that changed before or equal to the specified date and time stamp are returned.  The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_: ::     CCYY-MM-DDThh:mm:ss±hh:mm  The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC. For example, ``2015-08-27T09:49:58-05:00``. If you omit the time zone, the UTC time zone is assumed. When both ``changes-since`` and ``changes-before`` are specified, the value of the ``changes-before`` must be later than or equal to the value of the ``changes-since`` otherwise API will return 400. 
        :param str user_id: Filter the migrations by the given user ID. 
        :param str project_id: Filter the migrations by the given project ID. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hidden', 'host', 'instance_uuid', 'migration_type', 'source_compute', 'status', 'limit', 'marker', 'changes_since', 'changes_before', 'user_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v21_os_migrations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hidden' in params:
            query_params.append(('hidden', params['hidden']))  # noqa: E501
        if 'host' in params:
            query_params.append(('host', params['host']))  # noqa: E501
        if 'instance_uuid' in params:
            query_params.append(('instance_uuid', params['instance_uuid']))  # noqa: E501
        if 'migration_type' in params:
            query_params.append(('migration_type', params['migration_type']))  # noqa: E501
        if 'source_compute' in params:
            query_params.append(('source_compute', params['source_compute']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'marker' in params:
            query_params.append(('marker', params['marker']))  # noqa: E501
        if 'changes_since' in params:
            query_params.append(('changes-since', params['changes_since']))  # noqa: E501
        if 'changes_before' in params:
            query_params.append(('changes-before', params['changes_before']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('project_id', params['project_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2.1/os-migrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
